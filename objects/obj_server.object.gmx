<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize server object
var type = network_socket_udp;
var port = 8000;
socket = network_create_socket_ext(type, port);

//placeholders
remote_port = 0;
remote_ip = 0;

//Buffer
var size = 2048;
var buffertype = buffer_grow;
var alignment = 1;
send_buffer = buffer_create(size, buffertype, alignment);

//list of clients
clients = ds_list_create();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get port and ip from client
remote_port = async_load[? "port"];
remote_ip = string(async_load[? "ip"]);
//Get buffer (the packets) from client so we can work with it
var buffer = async_load[? "buffer"];
buffer_seek(buffer, buffer_seek_start, 0);


//Check client id
clientId = buffer_read(buffer, buffer_string);
var hasClient = false;
var currentClient = noone;
var clientTank = noone;
//If client exists, then find out who it is
if (ds_list_size(clients) &gt; 0)
{
    for (i = 0; i&lt;ds_list_size(clients); i++)
    {
        if (ds_list_find_value(clients, i) == clientId)
        {
            hasClient = true;
            switch(i)
            {
                case 0:
                    clientTank = obj_client1;
                    break;
                case 1:
                    clientTank = obj_client2;
                    break;
            }
        }
    }
}

//Add the new client in the list if not already added
if (!hasClient &amp;&amp; ds_list_size(clients) &lt; 4)
{
    ds_list_add(clients, clientId);
    send_nodeData(clientId);
    switch (ds_list_size(clients))
    {
        case 1:
            instance_create(x,y,obj_client1);
            clientTank = obj_client1;
            obj_client1.ID = clientId;
            break;
        case 2:
            instance_create(x,y,obj_client2);
            clientTank = obj_client2;
            obj_client2.ID = clientId;
            break;
    }
    
}


//Read the message in the packet
var packageId = buffer_read(buffer, buffer_u8);
if (room = r_battlefield){
    switch (packageId)
    {
        case 1:
            received_tankPos(buffer, clientTank);
            break;
        case 5:
            received_create_bullet(buffer);
            break;
        case 13:
            received_powerupDeleteData(buffer)
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(socket);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i = 0; i&lt;ds_list_size(clients); i++)
{
    draw_text(x, y+(i*32), ds_list_find_value(clients, i));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Send information about the map size in nodes

buffer_seek(send_buffer, buffer_seek_start,0);
buffer_write(send_buffer, buffer_u8, 11) //id
buffer_write(send_buffer, buffer_u8, obj_controller.map_sizeW);
buffer_write(send_buffer, buffer_u8, obj_controller.map_sizeH);
network_send_udp(socket,remote_ip,remote_port,send_buffer,buffer_tell(send_buffer));
//Send all nodes in the map grid
var node;
for (i = 0; i&lt;obj_controller.map_sizeW; i++)
{
    for (j = 0; j&lt;obj_controller.map_sizeH; j++)
    {   
        node = obj_controller.grid[i,j];
        buffer_seek(send_buffer, buffer_seek_start,0);
        buffer_write(send_buffer, buffer_u8,10) //id
        buffer_write(send_buffer, buffer_u16, node.x);
        buffer_write(send_buffer, buffer_u16, node.y);
        buffer_write(send_buffer, buffer_bool, node.wallUp);
        buffer_write(send_buffer, buffer_bool, node.wallLeft);
        buffer_write(send_buffer, buffer_bool, node.wallDown);
        buffer_write(send_buffer, buffer_bool, node.wallRight);
        network_send_udp(socket,remote_ip,remote_port,send_buffer,buffer_tell(send_buffer));
    }
}
/*
buffer_seek(send_buffer, buffer_seek_start,0);
buffer_write(send_buffer, buffer_u8,10) //id
buffer_write(send_buffer, buffer_u16, obj_controller.map_sizeW);
buffer_write(send_buffer, buffer_u16, obj_controller.map_sizeH);
network_send_udp(socket,remote_ip,remote_port,send_buffer,buffer_tell(send_buffer));
/*
var ID;
with (obj_node)
{
    ID = id;
    with (obj_server)
    {
        //encode all ID posistions, walls and transit
        buffer_seek(send_buffer, buffer_seek_start,0);
        buffer_write(send_buffer, buffer_u8,10) //id
        buffer_write(send_buffer, buffer_u16,ID.x); //x coord of the ID
        buffer_write(send_buffer, buffer_u16,ID.y); //y coord of the ID
        buffer_write(send_buffer, buffer_bool,ID.wallUp); //wallUp boolean
        buffer_write(send_buffer, buffer_bool,ID.wallLeft); //wallLeft boolean
        buffer_write(send_buffer, buffer_bool,ID.wallDown); //wallDown boolean
        buffer_write(send_buffer, buffer_bool,ID.wallRight); //wallRight boolean   
        network_send_udp(socket,remote_port,remote_port,send_buffer,buffer_tell(send_buffer));
        show_debug_message("Package about nodes sent");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
