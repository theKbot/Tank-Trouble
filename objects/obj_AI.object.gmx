<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tankRed</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_playerPAR</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Assign ID
ID = id;

//Start coords
//x = obj_controller.map_realSizeW-64;
//y = obj_controller.map_realSizeH-64;

//Da grid mayn
grid = obj_controller.grid;
//da Path returned from da script mayn
path = noone;
//where u be on da path mayn
pathPoint = 0;

//coordinat targets for A*
targetX = 0;
targetY = 0;
startX = 0;
startY = 0;

//coordinates for next point in path
pathNextPointX = x;
pathNextPointY = y;

//health related
hp = 100;

//movement related
spd = 0;
maxspd = 4;
t_maxspd = 4;//only for storing maxspd in attack mode
acceleration = maxspd/15;
deacceleration = (maxspd*maxspd)/120;
turnrate = 3;
strafespd = 0;
dir = 0;
alarm[1] = 60; //Initiate roaming
  //ai related
driveForwards = false;
driveBackwards = false;
turnLeft = false;
turnRight = false;
endOfPath = false;
  //turning and driving angle thresholds
turnAngleThreshold = 20; //how precise the AI will turn to a node
driveAngleThreshold = 35; //how soon the AI will drive before looking at a node
shootAngleThreshold = 15; //how precise the AI will shoot at player in degrees


//shooting related
canShoot = false;
shootRate = 30;
damage = 10;
bulletSpeed = 8;
alarm[0] = 60;
damage = 10;
maxStackedShots = 5;
rechargeTime = 80;
stackedShots = 5;
rechargingShot = false;
currentCharge = 0;

//finite states = roaming, attacking, goForPowerUp
enum modes{
    roaming,
    attacking,
    goForPowerUp
}
mode = modes.roaming;
    //for not spamming powerup coords
goingForPU = false;

//limits for things
highestMaxSpeed = 7;
highestShootRate = 60;

//player name
playerName = "AI Bot";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Get new coords (roam mode only)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//THIS SHOULD ONLY RUN IF MODE IS IN ROAMING
if (mode == modes.roaming){
    var chance = ceil(random(5));
    if (chance !=4){
        targetX = round(random(obj_controller.map_sizeW-1));
        targetY = round(random(obj_controller.map_sizeH-1));
    }
    else{
        targetX = obj_player.x/128;
        targetY = obj_player.y/128;
    }
    
    startX = x/128;
    startY = y/128;
    nodeOn = grid[startX,startY];
    goalNode = grid[targetX,targetY];
    path = AStar_get_path(nodeOn, goalNode, grid, obj_controller.map_sizeW, obj_controller.map_sizeH);
    path_set_closed(path, false);
    //set coordinate points
    pathPoint = 0;
    pathNextPointX = path_get_point_x(path, 0);
    pathNextPointY = path_get_point_y(path, 0);
    endOfPath = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can shoot</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canShoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//MOVEMENT CONTROL
var dirToPoint = point_direction(x,y,pathNextPointX, pathNextPointY);
    //set turning to null to begin with
turnRight = false;
turnLeft = false;

//
//TURNING
//
//Turn to the target if angle difference is too big
if (angle_difference(dir, dirToPoint)&gt;turnAngleThreshold){
    turnRight = true;
    turnLeft = false;
}
if (angle_difference(dir, dirToPoint)&lt;-turnAngleThreshold){
    turnRight = false;
    turnLeft = true;
}
    //Turning code
        //Left
if (turnLeft == true &amp;&amp; endOfPath = false){
    dir+=turnrate;
    image_angle = dir;
    if (place_meeting(x,y,obj_wallPAR)){
        //dir-=turnrate;
    }
}
        //Right
if (turnRight == true &amp;&amp; endOfPath = false){
    dir-=turnrate;
    image_angle = dir;
    if (place_meeting(x,y,obj_wallPAR)){
        //dir+=turnrate;
    }
}

//
//DRIVING
//
//Only accelerate towards the target if angle difference is low enough
if (angle_difference(dir, dirToPoint)&lt;driveAngleThreshold &amp;&amp; angle_difference(dir, dirToPoint)&gt;-driveAngleThreshold &amp;&amp; endOfPath = false){
    driveForwards = true;
}
else{
    driveForwards = false;
}

    //Driving code
        //Forwards
if (driveForwards == true){
    spd = min(maxspd, spd+acceleration);
}
        //Backwards
if ((driveForwards &amp;&amp; driveBackwards) or (!driveForwards &amp;&amp; !driveBackwards)){
    if (spd&gt;0){
        spd = max(0,spd-deacceleration);
    }
    if (spd&lt;0){
        spd = min(0,spd+deacceleration);
    }
}

//apply real speed to tank
speed = spd;
direction = dir;

//sprite
image_angle = dir;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Roam mode</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//ROAMING
if (mode == modes.roaming &amp;&amp; instance_exists(obj_player)){
    turnAngleThreshold = 20;
    goingForPU = false;
    //PATH CONTROL
    if (path_exists(path)){
        if (distance_to_point(pathNextPointX, pathNextPointY)&lt;5)
        {
          if (pathPoint+1 &lt; path_get_number(path))
            {
                pathPoint++;
                pathNextPointX = path_get_point_x(path, pathPoint);
                pathNextPointY = path_get_point_y(path, pathPoint);
            }
        }
        if (distance_to_point(goalNode.x, goalNode.y)&lt;15)
        {
            path_delete(path); //clear
            endOfPath = true;
            alarm[1] = random(60)+60; //
        }
        else{
            endOfPath = false;
        }
    }
    //Conditions for moving to other modes
        //Attack mode
    if (!collision_line(x,y,obj_player.x, obj_player.y, obj_wallPAR, 0, 1) &amp;&amp; stackedShots &gt; 0){
        mode = modes.attacking;
        t_maxspd = maxspd;
    }
    
        //PowerUp mode
    if (instance_exists(obj_powerupPAR) &amp;&amp; collision_line(x,y,obj_player.x, obj_player.y, obj_wallPAR, 0, 1)){
        mode = modes.goForPowerUp;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Attack mode</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Determine the bullets damage
var dmg = damage;

//Code for recharging shots
if (stackedShots &lt; maxStackedShots &amp;&amp; !rechargingShot){
    rechargingShot = true;
}
if (rechargingShot == true){
    currentCharge++;
    if (currentCharge == rechargeTime){
        rechargingShot = false;
        currentCharge = 0;
        stackedShots++;
    }
}

//Code for the actual mode
if (mode == modes.attacking &amp;&amp; instance_exists(obj_player)){
    maxspd = max(spd-deacceleration,0);
    endOfPath = false;
    turnAngleThreshold = turnrate;
    var dirToPlayer = point_direction(x,y,obj_player.x,obj_player.y);
    pathNextPointX = obj_player.x;
    pathNextPointY = obj_player.y;
    goingForPU = false;
    
    
    //Shoot if pointing at player 
    var bulletSpawnX, bulletSpawnY, ID, bulletSpread;
    bulletSpawnX = x+lengthdir_x(58,dir);
    bulletSpawnY = y+lengthdir_y(58,dir);
    ID = id;
    bulletSpread = 3;
    if (angle_difference(dir, dirToPlayer)&lt;shootAngleThreshold &amp;&amp; angle_difference(dir, dirToPlayer)&gt;-shootAngleThreshold)
        {
        if (canShoot == true &amp;&amp; stackedShots &gt; 0)
        {
            with instance_create(bulletSpawnX, bulletSpawnY, obj_bulletStandard)
            {
                speed = ID.bulletSpeed;
                direction = ID.dir+(random(bulletSpread)-random(bulletSpread));
                owner = ID;
                damage = dmg;
            }
            canShoot = false;
            stackedShots -= 1; //Remove a shot from the stack
            currentCharge = 0; //reset the charge time so that you don't get new bullets while firing
            alarm[0]=((highestShootRate-shootRate)+20)/2; //Set the alarm for being able to shoot again
        }
    }
    //conditions for other modes
        //roaming
    if (collision_line(x,y,obj_player.x,obj_player.y,obj_wallPAR, 0, 1)){
        if (!instance_exists(obj_powerupPAR)){
            mode = modes.roaming;
            targetX = obj_player.x/128;
            targetY = obj_player.y/128;
            startX = x/128;
            startY = y/128;
            nodeOn = grid[startX,startY];
            goalNode = grid[targetX,targetY];
            path = AStar_get_path(nodeOn, goalNode, grid, obj_controller.map_sizeW, obj_controller.map_sizeH);
            path_set_closed(path, false);
            //set coordinate points
            pathPoint = 0;
            pathNextPointX = path_get_point_x(path, 0);
            pathNextPointY = path_get_point_y(path, 0);
            endOfPath = false;
            maxspd = t_maxspd;
        }
        //powerup
        else{
            mode = modes.goForPowerUp;
            maxspd = t_maxspd;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Powerup mode</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mode == modes.goForPowerUp &amp;&amp; instance_exists(obj_player)){
    turnAngleThreshold = 20;
    
    if (goingForPU == false &amp;&amp; instance_exists(obj_powerupPAR)){
        var nearest_PU = instance_nearest(x,y,obj_powerupPAR);
        targetX = nearest_PU.x/128;
        targetY = nearest_PU.y/128;
        startX = x/128;
        startY = y/128;
        nodeOn = grid[startX,startY];
        goalNode = grid[targetX,targetY];
        path = AStar_get_path(nodeOn, goalNode, grid, obj_controller.map_sizeW, obj_controller.map_sizeH);
        path_set_closed(path, false);
        //set coordinate points
        pathPoint = 0;
        pathNextPointX = path_get_point_x(path, 0);
        pathNextPointY = path_get_point_y(path, 0);
        endOfPath = false; 
        goingForPU = true;
    }
    else if (!instance_exists(obj_powerupPAR)){
        goingForPU = false;
    }
    
    //PATH CONTROL
    if (path_exists(path)){
        if (distance_to_point(pathNextPointX, pathNextPointY)&lt;5)
        {
          if (pathPoint+1 &lt; path_get_number(path))
            {
                pathPoint++;
                pathNextPointX = path_get_point_x(path, pathPoint);
                pathNextPointY = path_get_point_y(path, pathPoint);
            }
        }
        if (distance_to_point(goalNode.x, goalNode.y)&lt;15)
        {
            path_delete(path); //clear
            endOfPath = true;
        }
        else{
            endOfPath = false;
        }
    }
    
    
    //Conditions for other modes
        //Roaming Mode
    if (!instance_exists(obj_powerupPAR)){
        mode = modes.roaming;
        alarm[1] = 30;
    }
        //Attack Mode
    if (!collision_line(x,y,obj_player.x, obj_player.y, obj_wallPAR, 0, 1) &amp;&amp; stackedShots &gt; 0){
        mode = modes.attacking;
        t_maxspd = maxspd;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Death</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ID = id;
if (hp &lt;= 0){
    with obj_bulletStandard{
        if (owner == ID){
            instance_destroy();
        }
    }
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Limits for variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (maxspd &gt; highestMaxSpeed){
    maxspd = highestMaxSpeed;
}
if (shootRate &gt; highestShootRate){ //At maximum, should only be able to shoot once per 10 steps
    shootRate = highestShootRate;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_powerupPAR">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>goingForPU = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_set_font(smallFont);
draw_set_color(c_blue);
draw_text(x-30, y-90, playerName);
draw_set_color(c_red);
draw_healthbar(x-32,y-60,x+32,y-52,hp,c_black,c_red,c_green,1,1,1);


/*draw_set_font(bigFont);
switch (mode)
{
    case 0: //roam
    draw_text(x-32, y-64, "Mode: Roaming");
    break;
    case 1: //attack
    draw_text(x-32, y-64, "Mode: Attacking!");
    break;
    case 2: //powerup
    draw_text(x-32, y-64, "Mode: Powerup");
    break;
}

draw_set_color(c_yellow);
if (path_exists(path)){
    if (path_get_number(path)&gt;1){
        for (i = 0; i&lt;path_get_number(path)-1; i++){
            draw_line(
                path_get_point_x(path,i),
                path_get_point_y(path,i),
                path_get_point_x(path,i+1),
                path_get_point_y(path,i+1)
            );
            draw_circle(path_get_point_x(path,i), path_get_point_y(path,i), 6, 1);
        }
    }
}
draw_set_color(c_red)
draw_line(x,y,grid[targetX,targetY].x, grid[targetX,targetY].y);
draw_set_color(c_blue)
draw_line(x,y,pathNextPointX, pathNextPointY);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>targetX = mouse_x/128;
targetY = mouse_y/128;
startX = x/128;
startY = y/128;
nodeOn = grid[startX,startY];
goalNode = grid[targetX,targetY];
path = AStar_get_path(nodeOn, goalNode, grid, obj_controller.map_sizeW, obj_controller.map_sizeH);
path_set_closed(path, false);
//set coordinate points
pathPoint = 0;
pathNextPointX = path_get_point_x(path, 0);
pathNextPointY = path_get_point_y(path, 0);
endOfPath = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
